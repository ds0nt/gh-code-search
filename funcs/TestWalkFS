func TestWalkFS(t *testing.T) {
testCases := []struct {
desc    string
buildfs []string
startAt string
depth   int
walkFn  filepath.WalkFunc
want    []string
}{{
"just root",
[]string{},
"/",
infiniteDepth,
nil,
[]string{
"/",
},
}, {
"infinite walk from root",
[]string{
"mkdir /a",
"mkdir /a/b",
"touch /a/b/c",
"mkdir /a/d",
"mkdir /e",
"touch /f",
},
"/",
infiniteDepth,
nil,
[]string{
"/",
"/a",
"/a/b",
"/a/b/c",
"/a/d",
"/e",
"/f",
},
}, {
"infinite walk from subdir",
[]string{
"mkdir /a",
"mkdir /a/b",
"touch /a/b/c",
"mkdir /a/d",
"mkdir /e",
"touch /f",
},
"/a",
infiniteDepth,
nil,
[]string{
"/a",
"/a/b",
"/a/b/c",
"/a/d",
},
}, {
"depth 1 walk from root",
[]string{
"mkdir /a",
"mkdir /a/b",
"touch /a/b/c",
"mkdir /a/d",
"mkdir /e",
"touch /f",
},
"/",
1,
nil,
[]string{
"/",
"/a",
"/e",
"/f",
},
}, {
"depth 1 walk from subdir",
[]string{
"mkdir /a",
"mkdir /a/b",
"touch /a/b/c",
"mkdir /a/b/g",
"mkdir /a/b/g/h",
"touch /a/b/g/i",
"touch /a/b/g/h/j",
},
"/a/b",
1,
nil,
[]string{
"/a/b",
"/a/b/c",
"/a/b/g",
},
}, {
"depth 0 walk from subdir",
[]string{
"mkdir /a",
"mkdir /a/b",
"touch /a/b/c",
"mkdir /a/b/g",
"mkdir /a/b/g/h",
"touch /a/b/g/i",
"touch /a/b/g/h/j",
},
"/a/b",
0,
nil,
[]string{
"/a/b",
},
}, {
"infinite walk from file",
[]string{
"mkdir /a",
"touch /a/b",
"touch /a/c",
},
"/a/b",
0,
nil,
[]string{
"/a/b",
},
}, {
"infinite walk with skipped subdir",
[]string{
"mkdir /a",
"mkdir /a/b",
"touch /a/b/c",
"mkdir /a/b/g",
"mkdir /a/b/g/h",
"touch /a/b/g/i",
"touch /a/b/g/h/j",
"touch /a/b/z",
},
"/",
infiniteDepth,
func(path string, info os.FileInfo, err error) error {
if path == "/a/b/g" {
return filepath.SkipDir
}
